version: '3.0'

services:
  # PHP Service
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: cloudsigma.com/php8.2
    container_name: Starwars
    restart: unless-stopped
    tty: true
    environment:
      SERVICE_NAME: app
      SERVICE_TAGS: dev
    working_dir: /var/www/html/
    volumes:
      - ./:/var/www/html/
      - ./php/laravel.ini:/usr/local/etc/php/conf.d/laravel.ini
    networks:
      - app-network-starwars

  dozzle:
    container_name: dozzle_logs
    image: amir20/dozzle:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8080:8080"
    environment:
      DOZZLE_LEVEL: trace
    healthcheck:
      test: [ "CMD", "/dozzle", "healthcheck" ]
      interval: 3s
      timeout: 30s
      retries: 5
      start_period: 30s
    networks:
      - app-network-starwars

  mailcatcher:
    image: schickling/mailcatcher:latest
    ports:
      - "1025:1025"
      - "1080:1080"
    networks:
      - app-network-starwars

  # Nginx Service
  webserver:
    image: nginx:alpine
    container_name: Starwars-webserver
    restart: unless-stopped
    tty: true
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./:/var/www/html/
      - ./nginx/conf.d/:/etc/nginx/conf.d/
      - ./letsencrypt:/etc/letsencrypt
      - ./www:/var/www/certbot
    networks:
      - app-network-starwars

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: Starwars-phpmyadmin
    restart: unless-stopped
    ports:
      - "8081:80"
    environment:
      - PMA_HOST=db
      - PMA_PORT=3306
    networks:
      - app-network-starwars

  # MySQL Service
  db:
    image: mysql:5.7.32
    container_name: Starwars-db
    restart: unless-stopped
    tty: true
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: starwars
      MYSQL_ROOT_PASSWORD: 123
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    volumes:
      - dbdata:/var/lib/mysql/
      - ./mysql/my.cnf:/etc/mysql/my.cnf
    networks:
      - app-network-starwars

  # Certbot Service
  certbot:
    image: certbot/certbot
    container_name: certbot-starwars
    volumes:
      - ./letsencrypt:/etc/letsencrypt
      - ./www:/var/www/certbot
    entrypoint: >
      sh -c 'trap exit TERM;
      while :; do
        certbot certonly --webroot -w /var/www/certbot -d irchasos.ovh;
        sleep 12h & wait $${!};
      done;'
    networks:
      - app-network-starwars

# Docker Networks
networks:
  app-network-starwars:
    driver: bridge

# Volumes
volumes:
  dbdata:
    driver: local
